// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int maxlength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxlength = maxLength;
        let length = 0;
        if(maxlength > 0){
            let str = Array.new(maxlength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(maxlength > 0){
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < length){
            return str[j];
        }
        else{
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < length){
            let str[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxlength){
            let str[length] = c;
            let length = length + 1;
        }
        else{
            do Sys.error(2);
        }
        return this;
    }



    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int place_value, digit;
        var bool started;

        let started = false;
        let place_value = 4;

        // clear original string;
        do str.dispose();
        let str = Array.new(maxlength);
        let length = 0;

        if(val < 0){
            let val = Math.abs(val);
            do appendChar(45);
        }

        while(~(place_value < 0)){
            let digit = val / Math.powerof10(place_value);  // figure out a specific digit
            let val = val - (Math.powerof10(place_value) * digit);  // sub off digit * power of 10
            if(~(digit = 0)){ // skips non significant zeros
                let started = true;
            }

            if(started | (place_value = 0)){
                do appendChar(digit + 48);
            }
            let place_value = place_value - 1;
        }

        return;
    }
}
