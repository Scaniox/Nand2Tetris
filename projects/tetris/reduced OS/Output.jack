// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed
 * within a frame which is 11 pixels high (including 1 pixel for inter-line
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {

    // Character map for displaying characters
    static Array charMaps;
    static int cursor_row;
    static int cursor_column;


    /** Initializes the screen, and locates the cursor at the screen's top-left. */
    function void init() {
        var int power, value;

        do Output.initMap(); // initalise character map
        return;
    }

    // Initializes the character map array
    function void initMap() {
        var int i;

        let charMaps = Array.new(127);

        // Black square, used for displaying non-printable characters.
        do Output.create(0,63,63,63,63,63,63,63,63,63,0,0);

        // Assigns the bitmap for each character in the charachter set.
        // The first parameter is the character index, the next 11 numbers
        // are the values of each row in the frame that represents this character.
        do Output.create(32,0,0,0,0,0,0,0,0,0,0,0);          //
        do Output.create(33,12,30,30,30,12,12,0,12,12,0,0);  // !

        do Output.create(48,12,30,51,51,51,51,51,30,12,0,0); // 0
        do Output.create(49,12,14,15,12,12,12,12,12,63,0,0); // 1
        do Output.create(50,30,51,48,24,12,6,3,51,63,0,0);   // 2
        do Output.create(51,30,51,48,48,28,48,48,51,30,0,0); // 3
        do Output.create(52,16,24,28,26,25,63,24,24,60,0,0); // 4
        do Output.create(53,63,3,3,31,48,48,48,51,30,0,0);   // 5
        do Output.create(54,28,6,3,3,31,51,51,51,30,0,0);    // 6
        do Output.create(55,63,49,48,48,24,12,12,12,12,0,0); // 7
        do Output.create(56,30,51,51,51,30,51,51,51,30,0,0); // 8
        do Output.create(57,30,51,51,51,62,48,48,24,14,0,0); // 9

        do Output.create(58,0,0,12,12,0,0,12,12,0,0,0);      // :

        do Output.create(65,12,30,63,51,51,63,51,51,51,0,0); // A ** TO BE FILLED **
        do Output.create(69,63,51,35,11,15,11,35,51,63,0,0); // E
        do Output.create(71,28,54,35,3,59,51,51,54,44,0,0);  // G
        do Output.create(77,33,51,63,63,51,51,51,51,51,0,0); // M
        do Output.create(79,30,51,51,51,51,51,51,51,30,0,0); // O
        do Output.create(82,31,51,51,51,31,27,51,51,51,0,0); // R
        do Output.create(83,30,51,51,6,28,48,51,51,30,0,0);  // S
        do Output.create(84,63,63,45,12,12,12,12,12,30,0,0); // T
        do Output.create(86,51,51,51,51,51,30,30,12,12,0,0); // V

        do Output.create(99,0,0,0,30,51,3,3,51,30,0,0);        // c
        do Output.create(101,0,0,0,30,51,63,3,51,30,0,0);      // e
        do Output.create(105,12,12,0,14,12,12,12,12,30,0,0);   // i
        do Output.create(111,0,0,0,30,51,51,51,51,30,0,0);     // o
        do Output.create(114,0,0,0,29,55,51,3,3,7,0,0);        // r
        do Output.create(115,0,0,0,30,51,6,24,51,30,0,0);      // s
        do Output.create(116,4,6,6,15,6,6,6,54,28,0,0);        // t

	    return;
    }

    // Creates the character map array of the given character index, using the given values.
    function void create(int index, int a, int b, int c, int d, int e,
                         int f, int g, int h, int i, int j, int k) {
        var Array map;

        let map = Array.new(11);

        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = k;

        let charMaps[index] = map;

        return;
    }

    // Returns the character map (array of size 11) of the given character.
    // If the given character is invalid or non-printable, returns the
    // character map of a black square.
    function Array getMap(char c) {
        if ((c < 32) | (c > 126)) {
            let c = 0;
        }
        return charMaps[c];
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        let cursor_row = i;
        let cursor_column = j;
        do Output.displayChar(32);

        return;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        do Output.displayChar(c);
        let cursor_column = cursor_column + 1;

        // screen looping
        if(cursor_column > 63){
            let cursor_column = 0;
            let cursor_row = cursor_row + 1;
            if(cursor_row > 22){
                let cursor_row = 0;
            }
        }

        return;
    }

    /** displays given character at cursor location,
     * not advancing */
     function void displayChar(char c) {
        var Array charmap;
        var int address, offset, row;
        let row = 0;

        if((cursor_row < 23) & (cursor_column < 64)){ // only draw characters within the screen
            let charmap = Output.getMap(c);

            let address = 16448 + (cursor_column / 2) + (cursor_row * 352);

            if(~(((cursor_column / 2) * 2 ) = cursor_column)){ // is an odd column, so must be shifted more
                let offset = 512;
            }
            else{
                let offset = 2;
            }

            while(row < 11){
                do Memory.poke(address, (Memory.peek(address) & ~(63 * offset))|(charmap[row] * offset));
                let row = row + 1;
                let address = address + 32;
            }
        }

        return;
     }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int char_index;

        let char_index = 0;
        while(char_index < s.length()){
            do Output.printChar(s.charAt(char_index));
            let char_index = char_index + 1;
        }

        return;
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int i) {
        var String str;

        let str = String.new(6);
        do str.setInt(i);
        do Output.printString(str);
        do str.dispose();

        return;
    }

}
