function Screen.break 0
push constant 0
return
function Screen.init 0
push constant 0
not
pop static 0
push constant 0
return
function Screen.clearScreen 1
push constant 16384
pop local 0
label WHILE_EXP0
push local 0
push constant 24576
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push constant 16384
push argument 0
push constant 16
call Math.divide 2
add
push argument 1
push constant 32
call Math.multiply 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 2
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
call Math.poweroftwo 1
or
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push local 2
call Math.poweroftwo 1
not
and
pop local 1
label IF_END0
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 0
push argument 0
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
push argument 3
call Screen.draw_v_line 3
pop temp 0
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 1
push argument 2
call Screen.draw_h_line 3
pop temp 0
label IF_FALSE1
push constant 0
return
function Screen.draw_v_line 2
push constant 16384
push argument 0
push constant 16
call Math.divide 2
add
push argument 1
push constant 32
call Math.multiply 2
add
pop local 0
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
call Math.poweroftwo 1
pop local 1
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push argument 1
push argument 2
lt
not
if-goto WHILE_END0
push local 0
push local 0
call Memory.peek 1
push local 1
or
call Memory.poke 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 32
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
goto IF_END0
label IF_FALSE0
label WHILE_EXP1
push argument 1
push argument 2
lt
not
if-goto WHILE_END1
push local 0
push local 0
call Memory.peek 1
push local 1
not
and
call Memory.poke 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 32
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
label IF_END0
push constant 0
return
function Screen.draw_h_line 4
push constant 16384
push argument 0
push constant 16
call Math.divide 2
add
push argument 1
push constant 32
call Math.multiply 2
add
push constant 1
add
pop local 0
push constant 16384
push argument 2
push constant 16
call Math.divide 2
add
push argument 1
push constant 32
call Math.multiply 2
add
push constant 1
add
pop local 1
push local 0
push local 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push argument 0
push argument 2
lt
not
if-goto WHILE_END0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_EXP0
label WHILE_END0
goto IF_END0
label IF_FALSE0
push constant 0
pop local 2
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
label WHILE_EXP1
push local 3
push constant 16
lt
not
if-goto WHILE_END1
push local 2
push local 3
call Math.poweroftwo 1
or
pop local 2
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push static 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
sub
push local 0
push constant 1
sub
call Memory.peek 1
push local 2
or
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push constant 1
sub
push local 0
push constant 1
sub
call Memory.peek 1
push local 2
not
and
call Memory.poke 2
pop temp 0
label IF_END1
push local 1
push constant 1
sub
pop local 1
label WHILE_EXP2
push local 0
push local 1
lt
not
if-goto WHILE_END2
push local 0
push static 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP2
label WHILE_END2
push constant 0
pop local 2
push argument 2
push argument 2
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
label WHILE_EXP3
push local 3
push constant 0
lt
not
not
if-goto WHILE_END3
push local 2
push local 3
call Math.poweroftwo 1
or
pop local 2
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP3
label WHILE_END3
push static 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push local 1
call Memory.peek 1
push local 2
or
call Memory.poke 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 1
push local 1
call Memory.peek 1
push local 2
not
and
call Memory.poke 2
pop temp 0
label IF_END2
label IF_END0
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
lt
not
if-goto WHILE_END0
push argument 0
push argument 1
push argument 2
call Screen.draw_h_line 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
push argument 2
call Math.multiply 2
pop local 2
push argument 2
neg
pop local 1
label WHILE_EXP0
push local 1
push argument 2
lt
not
if-goto WHILE_END0
push local 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
call Screen.draw_h_line 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
