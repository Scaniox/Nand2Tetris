// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > 0){
            return x;
        }
        else{
            return -x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int product, loops, twotothei;

        let product = 0;
        let loops = 0;
        let twotothei = 1;
        while(loops < 16){
            if(~((y & twotothei) = 0)){
                let product = product + x;
            }

            let x = x + x;
            let loops = loops + 1;
            let twotothei = twotothei + twotothei;
        }

        return product;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var bool result_neg;
        if(y = 0){
            do Sys.error("divide by zero error");
        }

        let result_neg = ((x < 0) | (y < 0)) & ~((x < 0) & (y < 0)); // xor of x and y signs
        if (result_neg){
            return -Math.reduced_div(Math.abs(x), Math.abs(y));
        }
        else{
            return Math.reduced_div(Math.abs(x), Math.abs(y));
        }

    }

    function int reduced_div(int x, int y){
        var int q, qy;

        if(y > x){
            return 0;
        }

        let q = Math.reduced_div(x, y + y);
        let qy = Math.multiply(q, y);
        if((x - qy - qy) < y){
            return q + q;
        }
        else{
            return q + q + 1;
        }


    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int lower, middle, upper;

        if(x < 0){
            do Sys.error("square root of negative number");
        }

        let lower = 0;
        let upper = 181;

        while(~(lower + 1 = upper)){
            let middle = (lower + upper) / 2;
            if(middle * middle < x){
                let lower = middle;
            }
            else{
                let upper = middle;
            }
        }

        return upper;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b){
            return b;
        }
        else{
            return a;
        }
    }
}
